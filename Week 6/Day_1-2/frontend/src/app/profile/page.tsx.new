"use client";

import { useState, useEffect } from "react";
import { useRouter } from "next/navigation";
import { useAuth } from "@/hooks/use-auth-rtk";
import {
  useGetAllOrdersQuery,
  useGetUserOrdersQuery,
} from "@/lib/api/ordersApiSlice";
import { formatCurrency } from "@/lib/utils";

export default function ProfilePage() {
  const router = useRouter();
  const { user, isAuthenticated } = useAuth();
  const [activeTab, setActiveTab] = useState<"info" | "orders">("info");
  const [currentPage, setCurrentPage] = useState(1);
  const limit = 5; // Orders per page

  // Fetch orders using both methods for comparison
  const { data: ordersData, isLoading: ordersLoading } = useGetAllOrdersQuery(
    {
      page: currentPage,
      limit,
      userId: user?._id // MongoDB stores IDs as _id
    },
    {
      skip: !isAuthenticated || activeTab !== "orders" || !user?._id,
      // Re-fetch when user changes or when the tab is selected
      refetchOnMountOrArgChange: true,
    }
  );
  
  // Try the dedicated user orders endpoint if userId is available
  const { 
    data: userOrdersData, 
    isLoading: userOrdersLoading 
  } = useGetUserOrdersQuery(
    {
      page: currentPage,
      limit,
      userId: user?._id || ''
    },
    {
      skip: !isAuthenticated || activeTab !== "orders" || !user?._id,
      refetchOnMountOrArgChange: true,
    }
  );

  // Redirect if not authenticated
  useEffect(() => {
    if (!isAuthenticated) {
      router.push("/authForm");
    }
  }, [isAuthenticated, router]);

  // Log user info and orders data for debugging
  useEffect(() => {
    if (user) {
      console.log("Current user:", user);
      console.log("User ID (_id):", user._id);
      console.log("User ID type:", typeof user._id);
      
      // Check if the ID is a valid MongoDB ObjectID
      const isValidObjectId = /^[0-9a-fA-F]{24}$/.test(user._id?.toString() || '');
      console.log("Is valid MongoDB ObjectID:", isValidObjectId);
      
      // Log the exact format for API debugging
      console.log("User ID for API calls:", {
        original: user._id,
        string: user._id?.toString(),
        validFormat: isValidObjectId
      });
    }
    if (ordersData) {
      console.log("Regular orders endpoint data:", ordersData);
      console.log("Regular orders count:", ordersData.orders?.length || 0);
    }
    if (userOrdersData) {
      console.log("User-specific orders endpoint data:", userOrdersData);
      console.log("User-specific orders count:", userOrdersData.orders?.length || 0);
    }
  }, [user, ordersData, userOrdersData]);

  if (!isAuthenticated) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        Redirecting to login...
      </div>
    );
  }

  return (
    <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
      <h1 className="text-3xl font-bold text-gray-900 mb-8">My Profile</h1>

      {/* Tabs */}
      <div className="border-b border-gray-200 mb-8">
        <nav className="-mb-px flex space-x-8">
          <button
            onClick={() => setActiveTab("info")}
            className={`pb-4 px-1 border-b-2 font-medium text-sm ${
              activeTab === "info"
                ? "border-black text-black"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            Personal Information
          </button>
          <button
            onClick={() => setActiveTab("orders")}
            className={`pb-4 px-1 border-b-2 font-medium text-sm ${
              activeTab === "orders"
                ? "border-black text-black"
                : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
            }`}
          >
            Order History
          </button>
        </nav>
      </div>

      {/* Personal Information Tab */}
      {activeTab === "info" && (
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-6">
            Personal Information
          </h2>

          <div className="space-y-6">
            <div>
              <h3 className="text-sm font-medium text-gray-500">Name</h3>
              <p className="mt-1 text-base font-medium text-gray-900">
                {user?.name || "Not provided"}
              </p>
            </div>

            <div>
              <h3 className="text-sm font-medium text-gray-500">Email</h3>
              <p className="mt-1 text-base font-medium text-gray-900">
                {user?.email}
              </p>
            </div>

            {/* Show saved addresses if available */}
            <div>
              <h3 className="text-sm font-medium text-gray-500 mb-2">
                Saved Addresses
              </h3>
              {user?.addresses && user.addresses.length > 0 ? (
                <div className="space-y-4">
                  {user.addresses.map((address, index) => (
                    <div
                      key={index}
                      className="border border-gray-200 rounded-md p-4"
                    >
                      <div className="flex justify-between">
                        <span className="font-medium">
                          {address.label || `Address ${index + 1}`}
                        </span>
                        {address.isDefault && (
                          <span className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-green-100 text-green-800">
                            Default
                          </span>
                        )}
                      </div>
                      <p className="text-gray-700 mt-2">{address.fullName}</p>
                      <p className="text-gray-700">{address.street1}</p>
                      {address.street2 && (
                        <p className="text-gray-700">{address.street2}</p>
                      )}
                      <p className="text-gray-700">
                        {address.city}, {address.state} {address.postalCode}
                      </p>
                      <p className="text-gray-700">{address.country}</p>
                      {address.phone && (
                        <p className="text-gray-700">{address.phone}</p>
                      )}
                    </div>
                  ))}
                </div>
              ) : (
                <p className="text-gray-500">No addresses saved yet.</p>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Order History Tab */}
      {activeTab === "orders" && (
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-xl font-semibold text-gray-900 mb-6">
            Order History
          </h2>

          {(ordersLoading && userOrdersLoading) ? (
            <div className="py-4 text-center">Loading orders...</div>
          ) : (userOrdersData?.orders?.length > 0 || ordersData?.orders?.length > 0) ? (
            <>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Order #
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Date
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Status
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Total
                      </th>
                      <th
                        scope="col"
                        className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"
                      >
                        Items
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {/* Prefer user-specific orders, fallback to regular orders */}
                    {(userOrdersData?.orders || ordersData?.orders || []).map((order) => (
                      <tr key={order._id} className="hover:bg-gray-50">
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {order.orderNumber || order._id.substring(0, 8)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {new Date(order.createdAt).toLocaleDateString()}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span
                            className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                              order.fulfillmentStatus === "delivered"
                                ? "bg-green-100 text-green-800"
                                : order.fulfillmentStatus === "cancelled"
                                  ? "bg-red-100 text-red-800"
                                  : "bg-yellow-100 text-yellow-800"
                            }`}
                          >
                            {(order.fulfillmentStatus &&
                              order.fulfillmentStatus.charAt(0).toUpperCase() +
                                order.fulfillmentStatus.slice(1)) ||
                              "Pending"}
                          </span>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {formatCurrency(order.total || order.totalAmount)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                          {order.items.length}
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>

              {/* Pagination */}
              {((userOrdersData?.totalPages || ordersData?.totalPages || 0) > 1) && (
                <div className="flex justify-center mt-6">
                  <nav className="flex items-center space-x-2">
                    <button
                      onClick={() =>
                        setCurrentPage((prev) => Math.max(prev - 1, 1))
                      }
                      disabled={currentPage === 1}
                      className={`px-3 py-1 rounded-md ${
                        currentPage === 1
                          ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                          : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                      }`}
                    >
                      Previous
                    </button>

                    <span className="text-sm text-gray-700">
                      Page {currentPage} of {userOrdersData?.totalPages || ordersData?.totalPages || 1}
                    </span>

                    <button
                      onClick={() =>
                        setCurrentPage((prev) =>
                          Math.min(prev + 1, userOrdersData?.totalPages || ordersData?.totalPages || 1)
                        )
                      }
                      disabled={currentPage === (userOrdersData?.totalPages || ordersData?.totalPages || 1)}
                      className={`px-3 py-1 rounded-md ${
                        currentPage === (userOrdersData?.totalPages || ordersData?.totalPages || 1)
                          ? "bg-gray-100 text-gray-400 cursor-not-allowed"
                          : "bg-gray-200 text-gray-700 hover:bg-gray-300"
                      }`}
                    >
                      Next
                    </button>
                  </nav>
                </div>
              )}
            </>
          ) : (
            <div className="py-4 text-center text-gray-500">
              No orders found for your account. You haven&apos;t placed any
              orders yet.
            </div>
          )}
        </div>
      )}
    </div>
  );
}
