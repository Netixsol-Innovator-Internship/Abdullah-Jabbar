1. Users Collection
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  passwordHash: { type: String, required: true },
  profilePicture: { type: String },
}, { timestamps: true });

module.exports = mongoose.model('User', userSchema);

2. Cars / Auctions Collection
const carSchema = new mongoose.Schema({
  sellerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  title: { type: String, required: true },
  description: { type: String },
  make: { type: String, required: true },
  model: { type: String, required: true },
  year: { type: Number, required: true },
  bodyType: { type: String, enum: ['sedan', 'sports', 'hatchback', 'convertible'], required: true },
  category: { type: String },
  photos: [{ type: String }],
  startingPrice: { type: Number, required: true },
  currentPrice: { type: Number, default: 0 },
  bids: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Bid' }],
  isCompleted: { type: Boolean, default: false },
  startTime: { type: Date, required: true },
  endTime: { type: Date, required: true },
}, { timestamps: true });

module.exports = mongoose.model('Car', carSchema);

3. Bids Collection
const bidSchema = new mongoose.Schema({
  auctionId: { type: mongoose.Schema.Types.ObjectId, ref: 'Car', required: true },
  bidderId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  amount: { type: Number, required: true },
  placedAt: { type: Date, default: Date.now },
});

module.exports = mongoose.model('Bid', bidSchema);


4. Payments Collection
const paymentSchema = new mongoose.Schema({
  auctionId: { type: mongoose.Schema.Types.ObjectId, ref: 'Car', required: true },
  buyerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  amountPaid: { type: Number, required: true },
  status: { type: String, enum: ['pending', 'inTransit', 'delivered', 'completed'], default: 'pending' },
  paymentDate: { type: Date, default: Date.now },
  deliveryUpdates: [
    {
      status: { type: String },
      updatedAt: { type: Date, default: Date.now }
    }
  ],
  lotNumber: { type: String },
}, { timestamps: true });

module.exports = mongoose.model('Payment', paymentSchema);

5. Wishlist Collection
const wishlistSchema = new mongoose.Schema({
  userId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
  auctionIds: [{ type: mongoose.Schema.Types.ObjectId, ref: 'Car' }],
}, { timestamps: true });

module.exports = mongoose.model('Wishlist', wishlistSchema);


6. Categories Collection
const categorySchema = new mongoose.Schema({
  name: { type: String, required: true, unique: true },
  icon: { type: String },
}, { timestamps: true });

module.exports = mongoose.model('Category', categorySchema);
